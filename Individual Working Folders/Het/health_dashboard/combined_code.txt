##### FILE: ./.dockerignore
==================================================
*.pyc
__pycache__/
.git
.venv
venv/
env/
.env
.idea/


##### FILE: ./Archive/views_v2.py
==================================================
from django.http import HttpResponse
from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
import csv
import os
from django.conf import settings


def home(request):
    if request.method == 'POST' and request.FILES.get('csv_file'):
        csv_file = request.FILES['csv_file']

        if not csv_file.name.endswith('.csv'):
            return render(request, 'stats/upload.html', {'error': 'This is not a CSV file.'})

        fs = FileSystemStorage()
        filename = fs.save(csv_file.name, csv_file)
        file_path = fs.path(filename)

        # Read and process the CSV file
        data = []
        with open(file_path, newline='', encoding='utf-8') as f:
            reader = csv.reader(f)
            for row in reader:
                data.append(row)

        # Clean up and delete the file after processing
        fs.delete(filename)

        return render(request, 'stats/upload.html', {'data': data})

    return render(request, 'stats/upload.html')


##### FILE: ./Archive/runfile.py
==================================================
import subprocess
import os

# Ensure we are in the correct directory (where `manage.py` is located)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

def runserver():
    try:
        # Run 'python manage.py runserver'
        subprocess.run(['python', 'manage.py', 'runserver'], cwd=BASE_DIR, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error occurred: {e}")

if __name__ == "__main__":
    runserver()



##### FILE: ./requirements.txt
==================================================
Django==5.1.2
pandas==2.2.3


##### FILE: ./Dockerfile
==================================================
# Use the official Python image from Docker Hub
FROM python:3.13-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file
COPY requirements.txt /app/

# Install dependencies
RUN pip install --upgrade pip
RUN pip install -r requirements.txt

# Copy the rest of the application code
COPY . /app/

# Expose port 8000 to the host
EXPOSE 8000

# Run the development server
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]



##### FILE: ./runfile.bat
==================================================
docker run -p 8000:8000 -v "D:/App project/Health-Dashboard [GH]/health_dashboard:/app" django-app


##### FILE: ./stats/admin.py
==================================================
from django.contrib import admin

# Register your models here.



##### FILE: ./stats/tests.py
==================================================
from django.test import TestCase

# Create your tests here.



##### FILE: ./stats/models.py
==================================================
from django.db import models

# Create your models here.



##### FILE: ./stats/views.py
==================================================
from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from django.conf import settings
import pandas as pd
import os

def home(request):
    if request.method == 'POST' and request.FILES.get('csv_file'):
        csv_file = request.FILES['csv_file']

        if not csv_file.name.endswith('.csv'):
            return render(request, 'stats/upload.html', {'error': 'This is not a CSV file.'})

        fs = FileSystemStorage()
        filename = fs.save(csv_file.name, csv_file)
        file_path = fs.path(filename)

        # Read the CSV file into a Pandas DataFrame
        try:
            df = pd.read_csv(file_path)
        except Exception as e:
            return render(request, 'stats/upload.html', {'error': f'Error reading CSV file: {e}'})

        fs.delete(filename)  # Clean up the uploaded file

        # Check if the DataFrame is empty
        if df.empty:
            return render(request, 'stats/upload.html', {'error': 'The CSV file is empty.'})

        # Calculate basic statistics for numerical columns
        numerical_data = df.describe().transpose()  # Get statistics for each column
        numerical_data.reset_index(inplace=True)  # Reset index to convert it to a DataFrame for rendering

        # Prepare the data for display
        formatted_data = []
        for index, row in numerical_data.iterrows():
            formatted_data.append({
                'header': row['index'],
                'mean': row['mean'],
                'median': df[row['index']].median(),  # Calculate median separately from describe
                'std_dev': row['std'],
            })

        return render(request, 'stats/upload.html', {'numerical_data': formatted_data})

    return render(request, 'stats/upload.html')



##### FILE: ./stats/urls.py
==================================================
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
]



##### FILE: ./stats/apps.py
==================================================
from django.apps import AppConfig


class StatsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'stats'



##### FILE: ./stats/migrations/__init__.py
==================================================



##### FILE: ./stats/__init__.py
==================================================



##### FILE: ./health_dashboard/settings.py
==================================================
"""
Django settings for health_dashboard project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6w+4dbtx__vp9dvyl-1!f143#yf*j#waxwy6l32smty730o6^m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'stats.apps.StatsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'health_dashboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'health_dashboard.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



##### FILE: ./health_dashboard/urls.py
==================================================
"""
URL configuration for health_dashboard project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('stats.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



##### FILE: ./health_dashboard/__init__.py
==================================================



##### FILE: ./health_dashboard/asgi.py
==================================================
"""
ASGI config for health_dashboard project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'health_dashboard.settings')

application = get_asgi_application()



##### FILE: ./health_dashboard/wsgi.py
==================================================
"""
WSGI config for health_dashboard project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'health_dashboard.settings')

application = get_wsgi_application()



##### FILE: ./manage.py
==================================================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'health_dashboard.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



.
├── Archive
│   ├── runfile.py
│   ├── upload_v2.html
│   └── views_v2.py
├── combined_code.txt
├── db.sqlite3
├── Dockerfile
├── .dockerignore
├── health_dashboard
│   ├── asgi.py
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-313.pyc
│   │   ├── settings.cpython-313.pyc
│   │   ├── urls.cpython-313.pyc
│   │   └── wsgi.cpython-313.pyc
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── manage.py
├── requirements.txt
├── runfile.bat
├── sample.csv
└── stats
    ├── admin.py
    ├── apps.py
    ├── __init__.py
    ├── migrations
    │   ├── __init__.py
    │   └── __pycache__
    │       └── __init__.cpython-313.pyc
    ├── models.py
    ├── __pycache__
    │   ├── admin.cpython-313.pyc
    │   ├── apps.cpython-313.pyc
    │   ├── __init__.cpython-313.pyc
    │   ├── models.cpython-313.pyc
    │   ├── urls.cpython-313.pyc
    │   └── views.cpython-313.pyc
    ├── templates
    │   └── stats
    │       └── upload.html
    ├── tests.py
    ├── urls.py
    └── views.py

9 directories, 36 files
